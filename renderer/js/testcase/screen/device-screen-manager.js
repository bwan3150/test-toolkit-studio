// ËÆæÂ§áÂ±èÂπïÁÆ°ÁêÜÂô®
// Ë¥üË¥£ËÆæÂ§áÂ±èÂπïÊà™ÂõæÂà∑Êñ∞„ÄÅXML overlay ÊòæÁ§∫Âíå UI ÂÖÉÁ¥†ÁÆ°ÁêÜ

// ============================================
// ÂÖ®Â±ÄÁä∂ÊÄÅÁÆ°ÁêÜ
// ============================================
const ScreenState = {
    // XML Overlay Áä∂ÊÄÅ
    xmlOverlayEnabled: false,
    currentUIElements: [],
    currentScreenSize: null,
    selectedElement: null,
    
    // ËßÇÂØüÂô®
    resizeObserver: null,
    
    // ËÆæÁΩÆÁä∂ÊÄÅÂπ∂ÂêåÊ≠•Âà∞ÂÖ®Â±Ä
    setXmlOverlayEnabled(value) {
        this.xmlOverlayEnabled = value;
        window.xmlOverlayEnabled = value; // ÂêëÂêéÂÖºÂÆπ
        window.rLog(`üìä XML Overlay Áä∂ÊÄÅÊõ¥Êñ∞: ${value}`);
    },
    
    reset() {
        this.xmlOverlayEnabled = false;
        this.currentUIElements = [];
        this.currentScreenSize = null;
        this.selectedElement = null;
        window.xmlOverlayEnabled = false;
    }
};

// ============================================
// Â∑•ÂÖ∑ÂáΩÊï∞
// ============================================
function getGlobals() {
    return window.AppGlobals;
}

// ============================================
// Â±èÂπïÊà™ÂõæÂäüËÉΩ
// ============================================
async function refreshDeviceScreen() {
    const { ipcRenderer, path } = getGlobals();
    const deviceSelect = document.getElementById('deviceSelect');
    const projectPath = window.AppGlobals.currentProject;
    
    if (!deviceSelect?.value) {
        window.NotificationModule.showNotification('ËØ∑ÂÖàÈÄâÊã©ËÆæÂ§á', 'warning');
        return;
    }
    
    if (!projectPath) {
        window.NotificationModule.showNotification('ËØ∑ÂÖàÊâìÂºÄÈ°πÁõÆ', 'error');
        return;
    }

    window.rLog('ÂºÄÂßãÊà™ÂõæÔºåËÆæÂ§á:', deviceSelect.value, 'È°πÁõÆË∑ØÂæÑ:', projectPath);
    const result = await ipcRenderer.invoke('adb-screenshot', deviceSelect.value, projectPath);
    
    window.rLog('Êà™ÂõæÁªìÊûú:', { success: result.success, hasImagePath: !!result.imagePath });
    
    if (result.success && result.imagePath) {
        const img = document.getElementById('deviceScreenshot');
        if (!img) {
            window.rError('Êú™ÊâæÂà∞ deviceScreenshot ÂÖÉÁ¥†');
            return;
        }
        
        img.src = `file://${result.imagePath}?t=${Date.now()}`;
        img.style.display = 'block';
        
        const placeholder = document.querySelector('.screen-placeholder');
        if (placeholder) {
            placeholder.style.display = 'none';
        }
        
        window.rLog('Êà™ÂõæÊòæÁ§∫ÊàêÂäü');
        
        // Êõ¥Êñ∞ËÆæÂ§á‰ø°ÊÅØÂπ∂Ëé∑ÂèñUIÁªìÊûÑ
        await updateDeviceInfoAndGetUIStructure();
    } else {
        const error = result.error || 'Êú™Áü•ÈîôËØØ';
        window.rError('Êà™ÂõæÂ§±Ë¥•:', error);
        window.NotificationModule.showNotification(`Êà™ÂõæÂ§±Ë¥•: ${error}`, 'error');
        
        // ÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØÂú®Â±èÂπïÂç†‰ΩçÁ¨¶‰∏ä
        const placeholder = document.querySelector('.screen-placeholder');
        if (placeholder) {
            placeholder.textContent = `Êà™ÂõæÂ§±Ë¥•: ${error}`;
            placeholder.style.display = 'block';
        }
    }
}

// ============================================
// UI ÁªìÊûÑËé∑ÂèñÂíåËß£Êûê
// ============================================
async function updateDeviceInfoAndGetUIStructure() {
    const { ipcRenderer, path } = getGlobals();
    const deviceSelect = document.getElementById('deviceSelect');
    const projectPath = window.AppGlobals.currentProject;
    
    if (!deviceSelect?.value || !projectPath) return;
    
    window.rLog(`üîÑ Ëé∑ÂèñËÆæÂ§áUIÁªìÊûÑ, ÂΩìÂâç overlay Áä∂ÊÄÅ: ${ScreenState.xmlOverlayEnabled}`);
    
    try {
        // Ëé∑ÂèñËÆæÂ§áXMLÁªìÊûÑ
        const result = await ipcRenderer.invoke('adb-get-ui-xml', {
            deviceId: deviceSelect.value,
            projectPath: projectPath,
            options: {
                useCompressedLayout: true,
                timeout: 30000,
                retryCount: 2
            },
            metadata: {
                screenSize: null,
                timestamp: Date.now(),
                deviceModel: null
            }
        });
        
        if (!result.success) {
            window.rError('Ëé∑ÂèñËÆæÂ§áUIÁªìÊûÑÂ§±Ë¥•:', result.error);
            if (result.error && result.error.includes('timeout')) {
                window.NotificationModule.showNotification('Ëé∑ÂèñUIÁªìÊûÑË∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•ËÆæÂ§áËøûÊé•', 'error');
            } else {
                window.NotificationModule.showNotification('Ëé∑ÂèñUIÁªìÊûÑÂ§±Ë¥•: ' + (result.error || 'Êú™Áü•ÈîôËØØ'), 'error');
            }
            return;
        }
        
        window.rLog('Â±èÂπïÂ∞∫ÂØ∏:', result.screenSize);
        
        // ÊòæÁ§∫ÂõæÁâáÂ∞∫ÂØ∏‰ø°ÊÅØ
        const deviceImage = document.getElementById('deviceScreenshot');
        if (deviceImage && deviceImage.complete) {
            const rect = deviceImage.getBoundingClientRect();
            window.rLog('ÂõæÁâáÊòæÁ§∫‰ø°ÊÅØ:', {
                left: rect.left,
                top: rect.top,
                width: rect.width,
                height: rect.height
            });
        }
        
        // ÈÄöËøá TKE ÊèêÂèñ UI ÂÖÉÁ¥†
        if (result.xml) {
            window.rLog('ÂºÄÂßãÈÄöËøá TKE ÊèêÂèñ UI ÂÖÉÁ¥†...');
            
            // Ë∞ÉÁî® TKE ÊèêÂèñÂÖÉÁ¥†
            const extractResult = await ipcRenderer.invoke('execute-tke-extract-elements', {
                deviceId: deviceSelect.value,
                projectPath: projectPath,
                screenWidth: result.screenSize?.width || 1080,
                screenHeight: result.screenSize?.height || 1920
            });
            
            if (extractResult.success && extractResult.elements) {
                window.rLog(`TKE ÊèêÂèñÂà∞ ${extractResult.elements.length} ‰∏™UIÂÖÉÁ¥†`);
                const elements = extractResult.elements;
                
                // ÊòæÁ§∫UIÂÖÉÁ¥†ÂàóË°®
                displayUIElementList(elements);
                
                // Â¶ÇÊûúXML overlay Â∑≤ÂêØÁî®ÔºåÊõ¥Êñ∞ overlay
                if (ScreenState.xmlOverlayEnabled) {
                    window.rLog('üìä XML overlay Â∑≤ÂêØÁî®ÔºåÊõ¥Êñ∞Ë¶ÜÁõñÂ±Ç');
                    await updateXmlOverlay(elements, result.screenSize);
                }
                
                // Â≠òÂÇ®ÂΩìÂâçÂ±èÂπïÂ∞∫ÂØ∏
                window.AppGlobals.currentScreenSize = result.screenSize;
                
                // Â¶ÇÊûúÊúâTKEÈÄÇÈÖçÂô®ÔºåÊõ¥Êñ∞Â±èÂπï‰ø°ÊÅØ
                if (window.TkeAdapterModule && window.TkeAdapterModule.updateScreenInfo) {
                    window.TkeAdapterModule.updateScreenInfo(result.screenSize);
                }
            } else {
                window.rError('TKE ÊèêÂèñUIÂÖÉÁ¥†Â§±Ë¥•:', extractResult.error);
            }
        }
        
    } catch (error) {
        window.rError('Error updating device info:', error);
        window.NotificationModule.showNotification('Êõ¥Êñ∞ËÆæÂ§á‰ø°ÊÅØÂ§±Ë¥•: ' + error.message, 'error');
    }
}

// ============================================
// XML Overlay ÁÆ°ÁêÜ
// ============================================

// ÂàáÊç¢ XML overlay Áä∂ÊÄÅ
async function toggleXmlOverlay() {
    window.rLog('üîò toggleXmlOverlay Ë¢´Ë∞ÉÁî®');
    const deviceSelect = document.getElementById('deviceSelect');
    
    if (!deviceSelect?.value) {
        window.NotificationModule.showNotification('ËØ∑ÂÖàÈÄâÊã©ËÆæÂ§á', 'warning');
        return;
    }
    
    // ÂàáÊç¢Áä∂ÊÄÅ
    const newState = !ScreenState.xmlOverlayEnabled;
    
    if (newState) {
        // ÂÖàÂ∞ùËØïÂêØÁî®ÔºåÊàêÂäüÂêéÂÜçËÆæÁΩÆÁä∂ÊÄÅ
        await enableXmlOverlay(deviceSelect.value);
        // enableXmlOverlay ÂÜÖÈÉ®‰ºöËÆæÁΩÆÁä∂ÊÄÅ
    } else {
        // Á¶ÅÁî®Êó∂Áõ¥Êé•ËÆæÁΩÆÁä∂ÊÄÅ
        ScreenState.setXmlOverlayEnabled(false);
        disableXmlOverlay();
    }
}

// ÂêØÁî® XML overlay
async function enableXmlOverlay(deviceId) {
    window.rLog(`üéØ ÂêØÁî® XML Overlay, deviceId = ${deviceId}`);
    
    try {
        window.NotificationModule.showNotification('Ê≠£Âú®ÂáÜÂ§áÊà™ÂõæÂíåUIÊ†ë...', 'info');
        
        const { ipcRenderer } = getGlobals();
        const projectPath = window.AppGlobals.currentProject;
        
        // 1. ÂÖàÁ°Æ‰øùÊúâÊà™Âõæ
        const deviceImage = document.getElementById('deviceScreenshot');
        if (!deviceImage || !deviceImage.complete || deviceImage.naturalWidth === 0) {
            window.rLog('ËÆæÂ§áÊà™ÂõæÊú™Âä†ËΩΩÔºåÂÖàÂà∑Êñ∞Â±èÂπï');
            await refreshDeviceScreen();
            
            // Á≠âÂæÖÂõæÁâáÂä†ËΩΩÂÆåÊàê
            await new Promise((resolve, reject) => {
                const img = document.getElementById('deviceScreenshot');
                if (img.complete) {
                    resolve();
                } else {
                    img.onload = resolve;
                    img.onerror = () => reject(new Error('Êà™ÂõæÂä†ËΩΩÂ§±Ë¥•'));
                }
            });
        }
        
        // 2. ÈÄöËøá TKE ÊèêÂèñ UI ÂÖÉÁ¥†Ôºà‰ªéÂ∑•‰ΩúÂå∫ÁöÑ current_ui_tree.xmlÔºâ
        // ÂÖàÁî®ÈªòËÆ§Â∞∫ÂØ∏Ë∞ÉÁî®TKE
        const extractResult = await ipcRenderer.invoke('execute-tke-extract-elements', {
            deviceId: deviceId,
            projectPath: projectPath,
            screenWidth: 1080,  // ‰∏¥Êó∂ÂÄº
            screenHeight: 2400  // ‰∏¥Êó∂ÂÄº
        });
        
        if (!extractResult.success || !extractResult.elements) {
            throw new Error('TKEÊèêÂèñUIÂÖÉÁ¥†Â§±Ë¥•: ' + (extractResult.error || 'Êú™Áü•ÈîôËØØ'));
        }
        
        // 3. ‰ªéÂÖÉÁ¥†ÁöÑbounds‰∏≠Êé®Êñ≠ÂÆûÈôÖÂ±èÂπïÂ∞∫ÂØ∏
        let screenSize = { width: 1080, height: 1920 };  // ÈªòËÆ§ÂÄº
        
        // Êü•ÊâæÊ†πËäÇÁÇπÔºàÈÄöÂ∏∏Á¨¨‰∏Ä‰∏™ÂÖÉÁ¥†ÔºâÊù•Á°ÆÂÆöÂ±èÂπïÂ∞∫ÂØ∏
        if (extractResult.elements.length > 0) {
            const rootElement = extractResult.elements[0];
            if (rootElement.bounds && rootElement.bounds.length === 4) {
                // boundsÊ†ºÂºè: [x1, y1, x2, y2]
                const inferredWidth = rootElement.bounds[2] - rootElement.bounds[0];
                const inferredHeight = rootElement.bounds[3] - rootElement.bounds[1];
                
                // Â¶ÇÊûúÊé®Êñ≠ÁöÑÂ∞∫ÂØ∏ÂêàÁêÜÔºàÂ§ß‰∫é800x600ÔºâÔºå‰ΩøÁî®ÂÆÉ
                if (inferredWidth >= 800 && inferredHeight >= 600) {
                    screenSize = { width: inferredWidth, height: inferredHeight };
                    window.rLog(`‰ªéXMLÊ†πËäÇÁÇπÊé®Êñ≠Â±èÂπïÂ∞∫ÂØ∏: ${screenSize.width}x${screenSize.height}`);
                }
            }
        }
        
        // Â¶ÇÊûúÊúâ‰øùÂ≠òÁöÑÂ±èÂπïÂ∞∫ÂØ∏‰∏îÂêàÁêÜÔºå‰πüÂèØ‰ª•‰ΩøÁî®
        if (window.AppGlobals.currentScreenSize && 
            window.AppGlobals.currentScreenSize.width > 0 && 
            window.AppGlobals.currentScreenSize.height > 0) {
            // ÊØîËæÉ‰∏§‰∏™Â∞∫ÂØ∏ÔºåÂ¶ÇÊûúÂ∑ÆÂºÇÂ§™Â§ßÔºå‰ΩøÁî®XMLÊé®Êñ≠ÁöÑ
            const savedSize = window.AppGlobals.currentScreenSize;
            const widthDiff = Math.abs(savedSize.width - screenSize.width);
            const heightDiff = Math.abs(savedSize.height - screenSize.height);
            
            if (widthDiff < 100 && heightDiff < 100) {
                // Â∑ÆÂºÇ‰∏çÂ§ßÔºå‰ΩøÁî®‰øùÂ≠òÁöÑÂ∞∫ÂØ∏ÔºàÂèØËÉΩÊõ¥ÂáÜÁ°ÆÔºâ
                screenSize = savedSize;
                window.rLog(`‰ΩøÁî®‰øùÂ≠òÁöÑÂ±èÂπïÂ∞∫ÂØ∏: ${screenSize.width}x${screenSize.height}`);
            }
        }
        
        // Â≠òÂÇ®ÂÖÉÁ¥†ÂíåÂ±èÂπïÂ∞∫ÂØ∏
        ScreenState.currentUIElements = extractResult.elements;
        ScreenState.currentScreenSize = screenSize;
        
        // 4. ÂàõÂª∫ overlay
        await createUIOverlay(ScreenState.currentUIElements, ScreenState.currentScreenSize);
        
        // 5. ÊòæÁ§∫ÂÖÉÁ¥†ÂàóË°®
        displayUIElementList(ScreenState.currentUIElements);
        
        // 6. Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        const toggleBtn = document.getElementById('toggleXmlBtn');
        if (toggleBtn) {
            toggleBtn.style.background = '#4CAF50';
            toggleBtn.setAttribute('title', 'ÂÖ≥Èó≠XML Overlay');
        }
        
        // ÊàêÂäüÂêéËÆæÁΩÆÁä∂ÊÄÅ‰∏∫ true
        ScreenState.setXmlOverlayEnabled(true);
        
        window.NotificationModule.showNotification(
            `XML OverlayÂ∑≤ÂêØÁî®ÔºåËØÜÂà´Âà∞${ScreenState.currentUIElements.length}‰∏™ÂÖÉÁ¥†`, 
            'success'
        );
        
        window.rLog(`‚úÖ XML Overlay ÂêØÁî®ÊàêÂäü! ÂÖÉÁ¥†Êï∞Èáè = ${ScreenState.currentUIElements.length}`);
        
    } catch (error) {
        const errorMsg = error?.message || error?.toString() || JSON.stringify(error) || 'Êú™Áü•ÈîôËØØ';
        window.rError('‚ùå ÂêØÁî®XML OverlayÂ§±Ë¥•:', errorMsg, error);
        window.NotificationModule.showNotification(`ÂêØÁî®XML OverlayÂ§±Ë¥•: ${errorMsg}`, 'error');
        ScreenState.setXmlOverlayEnabled(false);
    }
}

// Á¶ÅÁî® XML overlay
function disableXmlOverlay() {
    window.rLog('üìä Á¶ÅÁî® XML Overlay');
    
    // ÁßªÈô§UIÂè†Â±Ç
    const screenContent = document.getElementById('screenContent');
    if (screenContent) {
        const overlay = screenContent.querySelector('.ui-overlay');
        if (overlay) {
            overlay.remove();
        }
    }
    
    // Ê∏ÖÁ©∫UIÂÖÉÁ¥†ÂàóË°®
    displayUIElementList([]);
    
    // ÈáçÁΩÆÁä∂ÊÄÅ
    ScreenState.currentUIElements = [];
    ScreenState.selectedElement = null;
    ScreenState.setXmlOverlayEnabled(false);
    
    // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
    const toggleBtn = document.getElementById('toggleXmlBtn');
    if (toggleBtn) {
        toggleBtn.style.background = '';
        toggleBtn.setAttribute('title', 'ÂêØÁî®XML Overlay');
    }
    
    // Êñ≠ÂºÄ ResizeObserver
    if (ScreenState.resizeObserver) {
        ScreenState.resizeObserver.disconnect();
        ScreenState.resizeObserver = null;
    }
    
    window.NotificationModule.showNotification('XML OverlayÂ∑≤ÂÖ≥Èó≠', 'info');
}

// Êõ¥Êñ∞ XML overlayÔºàÂΩìÂ±èÂπïÂà∑Êñ∞Êó∂Ôºâ
async function updateXmlOverlay(elements, screenSize) {
    window.rLog('üîÑ Êõ¥Êñ∞ XML Overlay');
    
    // Êõ¥Êñ∞Áä∂ÊÄÅ
    ScreenState.currentUIElements = elements;
    ScreenState.currentScreenSize = screenSize;
    
    // ÈáçÊñ∞ÂàõÂª∫ overlay
    await createUIOverlay(elements, screenSize);
}

// ============================================
// UI Overlay Ê∏≤Êüì
// ============================================

// ÂàõÂª∫UIË¶ÜÁõñÂ±Ç
async function createUIOverlay(elements, screenSize) {
    window.rLog(`ÂàõÂª∫UIË¶ÜÁõñÂ±ÇÔºåÂÖÉÁ¥†Êï∞Èáè: ${elements.length}`);
    
    const screenContent = document.getElementById('screenContent');
    const deviceImage = document.getElementById('deviceScreenshot');
    
    if (!screenContent || !deviceImage) {
        window.rError('Êú™ÊâæÂà∞ÂøÖË¶ÅÁöÑDOMÂÖÉÁ¥†');
        return;
    }
    
    // ÁßªÈô§ÊóßÁöÑË¶ÜÁõñÂ±Ç
    const existingOverlay = screenContent.querySelector('.ui-overlay');
    if (existingOverlay) {
        existingOverlay.remove();
    }
    
    // ÂàõÂª∫Êñ∞ÁöÑË¶ÜÁõñÂ±Ç
    const overlay = document.createElement('div');
    overlay.className = 'ui-overlay';
    overlay.style.cssText = `
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 10;
    `;
    
    // Á°Æ‰øùÂÆπÂô®ÊòØÁõ∏ÂØπÂÆö‰Ωç
    screenContent.style.position = 'relative';
    screenContent.appendChild(overlay);
    
    // ËÆæÁΩÆ ResizeObserver Êù•ÁõëÂê¨ÂÆπÂô®Â§ßÂ∞èÂèòÂåñ
    setupResizeObserver(screenContent, deviceImage);
    
    // Ê∏≤ÊüìÂÖÉÁ¥†Ê°Ü
    renderUIElements(overlay, elements, screenSize);
}

// ËÆæÁΩÆ ResizeObserver
function setupResizeObserver(screenContent, deviceImage) {
    // Â¶ÇÊûúÂ∑≤ÊúâËßÇÂØüÂô®ÔºåÂÖàÊñ≠ÂºÄ
    if (ScreenState.resizeObserver) {
        ScreenState.resizeObserver.disconnect();
    }
    
    // ÂàõÂª∫Êñ∞ÁöÑËßÇÂØüÂô®
    ScreenState.resizeObserver = new ResizeObserver((entries) => {
        window.rLog('üîÑ ResizeObserver Ëß¶ÂèëÔºÅ');
        
        // ËæìÂá∫ÊØè‰∏™ÂÖÉÁ¥†ÁöÑÂ§ßÂ∞èÂèòÂåñ
        entries.forEach(entry => {
            const name = entry.target.id || entry.target.className;
            window.rLog(`üìè ÂÖÉÁ¥† ${name} Â§ßÂ∞èÂèòÂåñ:`, {
                width: entry.contentRect.width,
                height: entry.contentRect.height
            });
        });
        
        // Ê£ÄÊü•Êù°‰ª∂Âπ∂Êõ¥Êñ∞
        if (ScreenState.xmlOverlayEnabled && ScreenState.currentUIElements.length > 0) {
            window.rLog('‚úÖ Êù°‰ª∂Êª°Ë∂≥ÔºåÈáçÊñ∞Ê∏≤Êüì XML overlay');
            // Áõ¥Êé•ÈáçÊñ∞Ê∏≤ÊüìÊâÄÊúâÂÖÉÁ¥†‰ª•ÈÄÇÂ∫îÊñ∞Â∞∫ÂØ∏
            const overlay = document.querySelector('.ui-overlay');
            if (overlay) {
                renderUIElements(overlay, ScreenState.currentUIElements, ScreenState.currentScreenSize);
            }
        } else {
            window.rLog(`‚ùå Êù°‰ª∂‰∏çÊª°Ë∂≥:`, {
                xmlOverlayEnabled: ScreenState.xmlOverlayEnabled,
                elementsCount: ScreenState.currentUIElements.length
            });
        }
    });
    
    // ÂºÄÂßãËßÇÂØü
    ScreenState.resizeObserver.observe(screenContent);
    if (deviceImage) {
        ScreenState.resizeObserver.observe(deviceImage);
    }
    
    window.rLog('‚úÖ ResizeObserver Â∑≤ËÆæÁΩÆ');
}

// Êõ¥Êñ∞ overlay ‰ΩçÁΩÆÔºàÂΩìÂÆπÂô®Â§ßÂ∞èÂèòÂåñÊó∂Ôºâ
function updateOverlayPosition() {
    window.rLog('üéØ updateOverlayPosition Ë¢´Ë∞ÉÁî®');
    
    const screenContent = document.getElementById('screenContent');
    const overlay = screenContent?.querySelector('.ui-overlay');
    
    if (!overlay || !ScreenState.currentUIElements.length) {
        return;
    }
    
    // ÈáçÊñ∞Ê∏≤ÊüìÂÖÉÁ¥†Ê°Ü
    renderUIElements(overlay, ScreenState.currentUIElements, ScreenState.currentScreenSize);
}

// Ê∏≤ÊüìUIÂÖÉÁ¥†Ê°Ü
function renderUIElements(overlay, elements, screenSize) {
    const deviceImage = document.getElementById('deviceScreenshot');
    if (!deviceImage) return;
    
    // Ê∏ÖÁ©∫Áé∞ÊúâÂÜÖÂÆπ
    overlay.innerHTML = '';
    
    // Ëé∑ÂèñÂõæÁâáÂÆûÈôÖÊòæÁ§∫Â∞∫ÂØ∏
    const imgRect = deviceImage.getBoundingClientRect();
    const scaleX = imgRect.width / screenSize.width;
    const scaleY = imgRect.height / screenSize.height;
    
    window.rLog(`Ê∏≤ÊüìÊØî‰æã: scaleX=${scaleX}, scaleY=${scaleY}`);
    
    // ‰∏∫ÊØè‰∏™ÂÖÉÁ¥†ÂàõÂª∫Ê°Ü
    elements.forEach((element, index) => {
        if (!element.bounds || element.bounds.length !== 4) return;
        
        const [x1, y1, x2, y2] = element.bounds;
        
        // ÂàõÂª∫ÂÖÉÁ¥†Ê°Ü
        const elementBox = document.createElement('div');
        elementBox.className = 'ui-element-marker';  // ‰ΩøÁî®Ê≠£Á°ÆÁöÑCSSÁ±ªÂêç
        elementBox.dataset.index = index;
        elementBox.dataset.elementIndex = element.index;  // ÂÖºÂÆπÂéüÊúâ‰ª£Á†Å
        
        // ËÆ°ÁÆóÁº©ÊîæÂêéÁöÑ‰ΩçÁΩÆÂíåÂ§ßÂ∞è
        const left = x1 * scaleX;
        const top = y1 * scaleY;
        const width = (x2 - x1) * scaleX;
        const height = (y2 - y1) * scaleY;
        
        // Âè™ËÆæÁΩÆ‰ΩçÁΩÆÂíåÂ∞∫ÂØ∏ÔºåÊ†∑Âºè‰∫§ÁªôCSSÂ§ÑÁêÜ
        elementBox.style.cssText = `
            position: absolute;
            left: ${left}px;
            top: ${top}px;
            width: ${width}px;
            height: ${height}px;
        `;
        
        // CSSÂ∑≤ÁªèÂ§ÑÁêÜ‰∫ÜÊÇ¨ÂÅúÊïàÊûúÔºå‰∏çÈúÄË¶ÅJS
        
        // Ê∑ªÂä†ÁÇπÂáª‰∫ã‰ª∂
        elementBox.addEventListener('click', () => {
            selectElement(index);
        });
        
        overlay.appendChild(elementBox);
    });
    
    window.rLog(`‚úÖ Ê∏≤Êüì‰∫Ü ${elements.length} ‰∏™UIÂÖÉÁ¥†Ê°Ü`);
}

// ============================================
// UI ÂÖÉÁ¥†ÂàóË°®ÊòæÁ§∫
// ============================================

function displayUIElementList(elements) {
    // ‰ΩøÁî®ÂµåÂÖ•ÂºèUIÈù¢Êùø
    const bottomPanel = document.getElementById('uiElementsBottomPanel');
    const elementsContainer = document.getElementById('elementsListContainer');
    
    if (!bottomPanel || !elementsContainer) {
        window.rError('ÂµåÂÖ•ÂºèUIÈù¢ÊùøÂÖÉÁ¥†Êú™ÊâæÂà∞');
        return;
    }
    
    window.rLog(`ÂáÜÂ§áÊòæÁ§∫ ${elements.length} ‰∏™UIÂÖÉÁ¥†Âà∞UIÂ∫ì‰∏≠`);
    
    // Á°Æ‰øùÂ∫ïÈÉ®Èù¢ÊùøÂèØËßÅ
    bottomPanel.style.display = 'flex';
    bottomPanel.classList.remove('collapsed');
    bottomPanel.style.maxHeight = '300px';
    
    // Á°Æ‰øùtabÂÜÖÂÆπÂèØËßÅ
    const tabContent = document.getElementById('uiElementsPanelContent');
    const elementsListPane = document.getElementById('elementsListPane');
    if (tabContent) tabContent.style.display = 'block';
    if (elementsListPane) {
        elementsListPane.style.display = 'block';
        elementsListPane.classList.add('active');
    }
    
    // ËÆ°ÁÆóÊØè‰∏™ÂÖÉÁ¥†ÁöÑÂ∞∫ÂØ∏Âíå‰ΩçÁΩÆ‰ø°ÊÅØ
    const elementsWithSize = elements.map(el => {
        const width = el.bounds ? (el.bounds[2] - el.bounds[0]) : (el.width || 0);
        const height = el.bounds ? (el.bounds[3] - el.bounds[1]) : (el.height || 0);
        const centerX = el.bounds ? Math.round((el.bounds[0] + el.bounds[2]) / 2) : (el.centerX || 0);
        const centerY = el.bounds ? Math.round((el.bounds[1] + el.bounds[3]) / 2) : (el.centerY || 0);
        
        return { ...el, width, height, centerX, centerY };
    });
    
    // ÁîüÊàêÂÖÉÁ¥†ÂàóË°®HTML
    if (elements.length > 0) {
        const elementsHTML = elementsWithSize.map(el => `
            <div class="element-item" data-index="${el.index}">
                <div class="element-main" onclick="selectElementByIndex(${el.index})">
                    <div class="element-header">
                        <span class="element-index">[${el.index}]</span>
                        <span class="element-type">${el.className ? el.className.split('.').pop() : 'Unknown'}</span>
                    </div>
                    ${el.text ? `<div class="element-text">ÊñáÊú¨: ${el.text}</div>` : ''}
                    ${el.contentDesc ? `<div class="element-desc">ÊèèËø∞: ${el.contentDesc}</div>` : ''}
                    ${el.hint ? `<div class="element-hint">ÊèêÁ§∫: ${el.hint}</div>` : ''}
                    <div class="element-size">${el.width}√ó${el.height} @ (${el.centerX},${el.centerY})</div>
                </div>
                <div class="element-actions">
                    <button class="btn-icon-small save-to-locator-btn" 
                            onclick="event.stopPropagation(); saveElementToLocatorFromList(${el.index})" 
                            title="ÂÖ•Â∫ì"
                            style="background: transparent; border: none; padding: 4px;">
                        <svg viewBox="0 0 24 24" width="20" height="20">
                            <path fill="#FF9800" d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"/>
                        </svg>
                    </button>
                </div>
            </div>
        `).join('');
        
        elementsContainer.innerHTML = elementsHTML;
        window.rLog(`‚úÖ Â∑≤Â∞Ü ${elements.length} ‰∏™UIÂÖÉÁ¥†ÊòæÁ§∫Âú®UIÂ∫ì‰∏≠`);
        
        // ÊªöÂä®Âà∞Â∫ïÈÉ®Èù¢Êùø
        setTimeout(() => {
            bottomPanel.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }, 100);
        
    } else {
        // ÊòæÁ§∫Á©∫Áä∂ÊÄÅ
        const emptyStateHTML = !ScreenState.xmlOverlayEnabled 
            ? '<div class="empty-state"><div class="empty-state-text">XML OverlayÊú™ÂêØÁî®</div></div>'
            : '<div class="empty-state"><div class="empty-state-text">ÊöÇÊó†UIÂÖÉÁ¥†</div></div>';
        
        elementsContainer.innerHTML = emptyStateHTML;
    }
}

// ============================================
// ÂÖÉÁ¥†ÈÄâÊã©ÂäüËÉΩ
// ============================================

function selectElement(index) {
    window.rLog(`ÈÄâÊã©ÂÖÉÁ¥†: ${index}`);
    
    // Êõ¥Êñ∞ÈÄâ‰∏≠Áä∂ÊÄÅ
    ScreenState.selectedElement = index;
    
    // È´ò‰∫ÆÈÄâ‰∏≠ÁöÑÂÖÉÁ¥†Ê°Ü
    const overlay = document.querySelector('.ui-overlay');
    if (overlay) {
        const boxes = overlay.querySelectorAll('.ui-element-marker');
        boxes.forEach((box, i) => {
            if (i === index) {
                box.classList.add('selected');
            } else {
                box.classList.remove('selected');
            }
        });
    }
    
    // È´ò‰∫ÆÂàóË°®‰∏≠ÁöÑÂÖÉÁ¥†
    const listItems = document.querySelectorAll('.element-item');
    listItems.forEach((item, i) => {
        if (i === index) {
            item.classList.add('selected');
            item.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        } else {
            item.classList.remove('selected');
        }
    });
    
    // ÊòæÁ§∫ÂÖÉÁ¥†ËØ¶ÊÉÖ
    if (ScreenState.currentUIElements[index]) {
        const element = ScreenState.currentUIElements[index];
        window.rLog('ÈÄâ‰∏≠ÂÖÉÁ¥†ËØ¶ÊÉÖ:', element);
    }
}

// ‰ªéÂàóË°®ÈÄâÊã©ÂÖÉÁ¥†
window.selectElementByIndex = function(index) {
    selectElement(index);
};

// ‰øùÂ≠òÂÖÉÁ¥†Âà∞ÂÆö‰ΩçÂô®Â∫ì
window.saveElementToLocatorFromList = function(index) {
    const element = ScreenState.currentUIElements[index];
    if (element) {
        window.rLog('‰øùÂ≠òÂÖÉÁ¥†Âà∞ÂÆö‰ΩçÂô®Â∫ì:', element);
        // TODO: ÂÆûÁé∞‰øùÂ≠òÈÄªËæë
        window.NotificationModule.showNotification('ÂÖÉÁ¥†Â∑≤‰øùÂ≠òÂà∞ÂÆö‰ΩçÂô®Â∫ì', 'success');
    }
};

// ============================================
// ÂØºÂá∫Ê®°Âùó
// ============================================

window.DeviceScreenManagerModule = {
    refreshDeviceScreen,
    updateDeviceInfoAndGetUIStructure,
    toggleXmlOverlay,
    enableXmlOverlay,
    disableXmlOverlay,
    displayUIElementList,
    selectElement,
    
    // ÂØºÂá∫Áä∂ÊÄÅÔºàÂè™ËØªÔºâ
    getState: () => ({
        xmlOverlayEnabled: ScreenState.xmlOverlayEnabled,
        currentUIElements: ScreenState.currentUIElements,
        currentScreenSize: ScreenState.currentScreenSize,
        selectedElement: ScreenState.selectedElement
    })
};