name: Build Release

# 触发条件: 手动触发或推送 tag
on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 0.4.2)'
        required: false
        default: ''
      build_mac:
        description: '构建 macOS 版本'
        type: boolean
        default: true
      build_windows:
        description: '构建 Windows 版本'
        type: boolean
        default: true
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  RUST_VERSION: 'stable'

jobs:
  # 准备工作: 获取版本信息并更新 package.json
  prepare:
    name: 准备构建信息
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      date: ${{ steps.version.outputs.date }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取版本号
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v$VERSION"
          else
            VERSION=$(grep '"version"' package.json | head -1 | sed -E 's/.*"version": *"([^"]+)".*/\1/')
            TAG="manual-$VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

          echo "📦 版本: $VERSION"
          echo "🏷️  标签: $TAG"

      - name: 更新 package.json 版本号
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # 读取当前 package.json 中的版本
          CURRENT_VERSION=$(grep '"version"' package.json | head -1 | sed -E 's/.*"version": *"([^"]+)".*/\1/')

          if [[ "$CURRENT_VERSION" != "$VERSION" ]]; then
            echo "更新 package.json: $CURRENT_VERSION → $VERSION"
            sed -i -E "s/\"version\": *\"[^\"]+\"/\"version\": \"$VERSION\"/" package.json

            # 配置 git
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

            # 提交更改
            git add package.json
            git commit -m "Update: version tag $VERSION by GitHub Action"
            git push

            echo "✅ package.json 已更新并提交"
          else
            echo "✅ package.json 版本已是最新 ($VERSION)，无需更新"
          fi

  # macOS 构建
  build-macos:
    name: 构建 macOS 应用
    needs: prepare
    runs-on: macos-latest
    environment: aws-production  # 使用 Environment Secrets
    env:
      BUILD_VERSION: ${{ needs.prepare.outputs.version }}
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.build_mac == 'true')
    steps:
      - name: 检出代码（跳过 LFS 大文件）
        uses: actions/checkout@v4
        with:
          lfs: false  # 不下载 LFS 大文件，从源代码重新构建

      # 设置 Node.js 环境
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 设置 Rust 环境
      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      # 缓存 Cargo
      - name: 缓存 Cargo 依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            toolkit-engine/target
            tester-ai/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 设置 Python 环境 (用于 opencv-matcher)
      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 安装 uv (Python 包管理器)
      - name: 安装 uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      # 安装 Node.js 依赖
      - name: 安装 Node.js 依赖
        run: |
          npm install
          npm audit fix || true

      # 构建 toolkit-engine (TKE)
      - name: 构建 Toolkit Engine (Rust)
        working-directory: toolkit-engine
        run: |
          echo "=== 构建 TKE for macOS ==="
          echo "版本号: $BUILD_VERSION"

          # 构建（build.rs 会自动从 BUILD_VERSION 环境变量读取版本）
          cargo build --release

          # 复制到资源目录
          mkdir -p ../resources/darwin/toolkit-engine
          cp target/release/tke ../resources/darwin/toolkit-engine/tke
          chmod +x ../resources/darwin/toolkit-engine/tke

          echo "✅ TKE 构建完成"
          ls -lh ../resources/darwin/toolkit-engine/tke

      # 构建 opencv-matcher (Python)
      - name: 构建 OpenCV Matcher (Python)
        working-directory: opencv-matcher
        run: |
          echo "=== 构建 tke-opencv for macOS ==="
          echo "版本号: $BUILD_VERSION"

          # 生成 _version.py 文件（打包时嵌入版本号）
          echo "# 自动生成的版本文件 - 请勿手动修改" > _version.py
          echo "__version__ = '$BUILD_VERSION'" >> _version.py
          echo "✓ 已生成 _version.py: $BUILD_VERSION"

          # 同步依赖并打包
          uv sync --group dev
          .venv/bin/pyinstaller \
            --onefile \
            --name tke-opencv \
            --clean \
            --noconfirm \
            opencv_matcher.py

          # 清理生成的 _version.py
          rm -f _version.py

          # 复制到资源目录
          mkdir -p ../resources/darwin/toolkit-engine
          cp dist/tke-opencv ../resources/darwin/toolkit-engine/tke-opencv
          chmod +x ../resources/darwin/toolkit-engine/tke-opencv

          echo "✅ tke-opencv 构建完成"
          ls -lh ../resources/darwin/toolkit-engine/tke-opencv

      # 构建 tester-ai (Rust)
      - name: 构建 AI Tester (Rust)
        working-directory: tester-ai
        run: |
          echo "=== 构建 tester-ai for macOS ==="
          echo "版本号: $BUILD_VERSION"

          # 构建（build.rs 会自动从 BUILD_VERSION 环境变量读取版本）
          cargo build --release

          # 复制到资源目录
          mkdir -p ../resources/darwin/tester-ai
          cp target/release/tester-ai ../resources/darwin/tester-ai/tester-ai
          chmod +x ../resources/darwin/tester-ai/tester-ai

          echo "✅ tester-ai 构建完成"
          ls -lh ../resources/darwin/tester-ai/tester-ai

      # 验证所有二进制文件
      - name: 验证构建产物
        run: |
          set -e  # 遇到错误立即退出
          echo "=== 验证构建产物 ==="

          echo "📦 TKE:"
          resources/darwin/toolkit-engine/tke --version

          echo "📦 tke-opencv:"
          resources/darwin/toolkit-engine/tke-opencv --version

          echo "📦 tester-ai:"
          resources/darwin/tester-ai/tester-ai --version || resources/darwin/tester-ai/tester-ai --help

          echo "✅ 所有二进制文件验证完成"

      # 构建 Electron 应用 (macOS)
      - name: 构建 Electron 应用
        run: |
          echo "=== 构建 Electron 应用 for macOS ==="
          # 添加 --publish never 禁用自动发布
          npx electron-builder --mac --publish never

          echo "✅ Electron 应用构建完成"
          ls -lh dist/

      # 重命名应用
      - name: 重命名应用
        run: |
          mkdir -p release

          # 查找生成的 DMG 或 APP
          if ls dist/*.dmg 1> /dev/null 2>&1; then
            DMG_FILE=$(ls dist/*.dmg | head -n 1)
            cp "$DMG_FILE" "release/Toolkit Studio ${{ needs.prepare.outputs.tag }} macOS.dmg"
            echo "✅ 找到 DMG: $DMG_FILE"
          elif ls dist/mac/*.app 1> /dev/null 2>&1; then
            APP_FILE=$(ls -d dist/mac/*.app | head -n 1)
            # 压缩为 zip
            cd dist/mac
            zip -r "../../release/Toolkit Studio ${{ needs.prepare.outputs.tag }} macOS.zip" *.app
            cd ../..
            echo "✅ 找到 APP，已压缩为 ZIP"
          else
            echo "❌ 未找到 DMG 或 APP 文件"
            ls -R dist/
            exit 1
          fi

      # 上传到 Artifacts
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: release/*
          retention-days: 30

      # 上传到 S3（用于自动更新）
      - name: 上传 macOS 更新文件到 S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-southeast-2
        run: |
          echo "📤 上传 macOS 更新文件到 S3..."

          # 检查必需的文件是否存在
          if ls dist/*.zip 1> /dev/null 2>&1; then
            echo "✅ 找到 .zip 文件"
            aws s3 cp dist/*.zip s3://toolkit-studio-updates/app/ --acl public-read
          else
            echo "⚠️  未找到 .zip 文件"
          fi

          if ls dist/*.zip.blockmap 1> /dev/null 2>&1; then
            echo "✅ 找到 .blockmap 文件"
            aws s3 cp dist/*.zip.blockmap s3://toolkit-studio-updates/app/ --acl public-read
          else
            echo "⚠️  未找到 .blockmap 文件"
          fi

          if [ -f "dist/latest-mac.yml" ]; then
            echo "✅ 找到 latest-mac.yml"
            aws s3 cp dist/latest-mac.yml s3://toolkit-studio-updates/app/ --acl public-read
          else
            echo "❌ 未找到 latest-mac.yml（必需文件！）"
            exit 1
          fi

          echo "✅ macOS 更新文件已上传到 S3"

          # 验证上传
          echo ""
          echo "📋 验证上传结果："
          aws s3 ls s3://toolkit-studio-updates/app/ | grep -E "(latest-mac.yml|\.zip|\.blockmap)" || true
        if: github.event_name == 'push' || github.event.inputs.version != ''

  # Windows 构建
  build-windows:
    name: 构建 Windows 应用
    needs: prepare
    runs-on: windows-latest
    environment: aws-production  # 使用 Environment Secrets
    env:
      BUILD_VERSION: ${{ needs.prepare.outputs.version }}
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.build_windows == 'true')
    steps:
      - name: 检出代码（跳过 LFS 大文件）
        uses: actions/checkout@v4
        with:
          lfs: false  # 不下载 LFS 大文件，从源代码重新构建

      # 设置 Node.js 环境
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # 设置 Rust 环境
      - name: 设置 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      # 缓存 Cargo
      - name: 缓存 Cargo 依赖
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            toolkit-engine/target
            tester-ai/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # 设置 Python 环境
      - name: 设置 Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 安装 uv (Windows) - 使用 pip 安装更可靠
      - name: 安装 uv
        shell: cmd
        run: |
          pip install uv
          uv --version

      # 安装 Node.js 依赖
      - name: 安装 Node.js 依赖
        shell: cmd
        run: |
          npm install
          npm audit fix

      # 构建 toolkit-engine (TKE)
      - name: 构建 Toolkit Engine (Rust)
        shell: cmd
        working-directory: toolkit-engine
        run: |
          echo === 构建 TKE for Windows ===
          echo 版本号: %BUILD_VERSION%

          REM 构建（build.rs 会自动从 BUILD_VERSION 环境变量读取版本）
          cargo build --release

          REM 创建目标目录
          if not exist "..\resources\win32\toolkit-engine" mkdir "..\resources\win32\toolkit-engine"

          REM 复制到资源目录
          copy /Y "target\release\tke.exe" "..\resources\win32\toolkit-engine\tke.exe"

          echo ✅ TKE 构建完成
          dir "..\resources\win32\toolkit-engine\tke.exe"

      # 构建 opencv-matcher (Python)
      - name: 构建 OpenCV Matcher (Python)
        shell: cmd
        working-directory: opencv-matcher
        run: |
          echo === 构建 tke-opencv for Windows ===
          echo 版本号: %BUILD_VERSION%

          REM 生成 _version.py 文件（打包时嵌入版本号）
          echo # 自动生成的版本文件 - 请勿手动修改 > _version.py
          echo __version__ = '%BUILD_VERSION%' >> _version.py
          echo 已生成 _version.py: %BUILD_VERSION%

          REM 同步依赖
          uv sync --group dev

          REM 打包
          .venv\Scripts\pyinstaller --onefile --name tke-opencv --clean --noconfirm opencv_matcher.py

          REM 清理生成的 _version.py
          if exist "_version.py" del /f /q "_version.py"

          REM 检查打包是否成功
          if not exist "dist\tke-opencv.exe" (
            echo ❌ 打包失败：未找到 dist\tke-opencv.exe
            exit /b 1
          )

          REM 创建目标目录
          if not exist "..\resources\win32\toolkit-engine" mkdir "..\resources\win32\toolkit-engine"

          REM 复制到资源目录
          copy /Y "dist\tke-opencv.exe" "..\resources\win32\toolkit-engine\tke-opencv.exe"

          echo ✅ tke-opencv 构建完成
          dir "..\resources\win32\toolkit-engine\tke-opencv.exe"

      # 构建 tester-ai (Rust)
      - name: 构建 AI Tester (Rust)
        shell: cmd
        working-directory: tester-ai
        run: |
          echo === 构建 tester-ai for Windows ===
          echo 版本号: %BUILD_VERSION%

          REM 构建（build.rs 会自动从 BUILD_VERSION 环境变量读取版本）
          cargo build --release

          REM 创建目标目录
          if not exist "..\resources\win32\tester-ai" mkdir "..\resources\win32\tester-ai"

          REM 复制到资源目录
          copy /Y "target\release\tester-ai.exe" "..\resources\win32\tester-ai\tester-ai.exe"

          echo ✅ tester-ai 构建完成
          dir "..\resources\win32\tester-ai\tester-ai.exe"

      # 验证所有二进制文件
      - name: 验证构建产物
        shell: cmd
        run: |
          echo === 验证构建产物 ===

          echo 📦 TKE:
          resources\win32\toolkit-engine\tke.exe --version
          if errorlevel 1 exit /b 1

          echo 📦 tke-opencv:
          resources\win32\toolkit-engine\tke-opencv.exe --version
          if errorlevel 1 exit /b 1

          echo 📦 tester-ai:
          resources\win32\tester-ai\tester-ai.exe --version
          if errorlevel 1 exit /b 1

          echo ✅ 所有二进制文件验证完成

      # 构建 Electron 应用 (Windows)
      - name: 构建 Electron 应用
        shell: cmd
        run: |
          echo === 构建 Electron 应用 for Windows ===
          REM 添加 --publish never 禁用自动发布
          npx electron-builder --win --publish never

          echo ✅ Electron 应用构建完成
          dir dist\

      # 重命名应用
      - name: 重命名应用
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release

          # 查找生成的安装包
          $exeFile = Get-ChildItem -Path dist -Filter "*.exe" -Recurse | Select-Object -First 1
          if ($exeFile) {
            Copy-Item -Path $exeFile.FullName -Destination "release/Toolkit Studio ${{ needs.prepare.outputs.tag }} Windows.exe"
            Write-Host "✅ 找到安装包: $($exeFile.FullName)"
          } else {
            Write-Host "❌ 未找到安装包"
            Get-ChildItem -Path dist -Recurse
            exit 1
          }

      # 上传到 Artifacts
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: release/*
          retention-days: 30

      # 上传到 S3（用于自动更新）
      - name: 上传 Windows 更新文件到 S3
        shell: pwsh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ap-southeast-2
        run: |
          Write-Host "📤 上传 Windows 更新文件到 S3..."

          # 检查必需的文件是否存在
          $exeFiles = Get-ChildItem -Path dist -Filter "*.exe" -Recurse
          if ($exeFiles) {
            Write-Host "✅ 找到 .exe 文件"
            foreach ($file in $exeFiles) {
              aws s3 cp $file.FullName s3://toolkit-studio-updates/app/ --acl public-read
            }
          } else {
            Write-Host "⚠️  未找到 .exe 文件"
          }

          $blockmapFiles = Get-ChildItem -Path dist -Filter "*.exe.blockmap" -Recurse
          if ($blockmapFiles) {
            Write-Host "✅ 找到 .blockmap 文件"
            foreach ($file in $blockmapFiles) {
              aws s3 cp $file.FullName s3://toolkit-studio-updates/app/ --acl public-read
            }
          } else {
            Write-Host "⚠️  未找到 .blockmap 文件"
          }

          if (Test-Path "dist/latest.yml") {
            Write-Host "✅ 找到 latest.yml"
            aws s3 cp dist/latest.yml s3://toolkit-studio-updates/app/ --acl public-read
          } else {
            Write-Host "❌ 未找到 latest.yml（必需文件！）"
            exit 1
          }

          Write-Host "✅ Windows 更新文件已上传到 S3"

          # 验证上传
          Write-Host ""
          Write-Host "📋 验证上传结果："
          aws s3 ls s3://toolkit-studio-updates/app/
        if: github.event_name == 'push' || github.event.inputs.version != ''

  # 创建 GitHub Release
  create-release:
    name: 创建 GitHub Release
    needs: [prepare, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.build-macos.result == 'success' || needs.build-windows.result == 'success') &&
      (startsWith(github.ref, 'refs/tags/') || github.event.inputs.version != '')
    permissions:
      contents: write
    steps:
      - name: 下载所有 Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 列出所有文件
        run: |
          echo "📦 所有构建产物:"
          find artifacts -type f -exec ls -lh {} \;

      - name: 创建 Release 草稿
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: Toolkit Studio ${{ needs.prepare.outputs.tag }}
          generate_release_notes: true
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
